/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name: Control Concepts, Inc.
System Name:
System Number:
Programmer: JJM
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
#DEFINE_CONSTANT TRUE 1
#DEFINE_CONSTANT FALSE 0
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM

#HELP_BEGIN
To be used with BSS BLU Command Processor v1.0.umc module only.
Not to be used as a stand-alone module.
#HELP_END

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
#USER_SIMPLSHARP_LIBRARY "BSSCommLIB"

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT _SKIP_,_SKIP_,_SKIP_,_SKIP_;
DIGITAL_INPUT Connect;
DIGITAL_INPUT Disconnect;
DIGITAL_INPUT Initialize;
DIGITAL_INPUT Debug;

DIGITAL_OUTPUT _SKIP_,_SKIP_,_SKIP_,_SKIP_;
DIGITAL_OUTPUT Is_Communicating, Is_Initialized;

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
INTEGER_PARAMETER CommandProcessorID;
INTEGER_PARAMETER NodeAddress;
INTEGER_PARAMETER IPPort;
STRING_PARAMETER IPAddress[100];

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/

#BEGIN_PARAMETER_PROPERTIES CommandProcessorID
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propBounds = 1d , 10d;
   propDefaultValue = 1d;
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES NodeAddress
   propValidUnits = unitHex;
   propDefaultUnit = unitHex;
   propBounds = 0x0 , 0xffff;
   propDefaultValue = 0x0;
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES IPPort
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propBounds = 1d , 65535d;
   propDefaultValue = 1023d;
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES IPAddress
   propValidUnits = unitString;
   propDefaultUnit = unitString;
   propDefaultValue = "0.0.0.0";
#END_PARAMETER_PROPERTIES

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
BSSComm myComm;
/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
callback Function SendDebug(String msg)
{
	if (Debug)
		trace("%s", msg);
}

callback Function OnInitializeChange(Integer state)
{
	Is_Initialized = state;
}

callback Function OnCommunicatingChange(Integer state)
{
	Is_Communicating = state;
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
PUSH Initialize
{
	myComm.Initialize(TRUE);
}
RELEASE Initialize
{
	myComm.Initialize(FALSE);
}
                                           
PUSH Connect
{
	myComm.Connect(IPAddress, IPPort); 
}

PUSH Disconnect
{
	myComm.Disconnect(); 
}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
Function Main()
{
    WaitForInitializationComplete();
                                                          
	RegisterDelegate(myComm, SendDebug, SendDebug); 
	RegisterDelegate(myComm, OnInitializeChange, OnInitializeChange); 
	RegisterDelegate(myComm, OnCommunicatingChange, OnCommunicatingChange); 
           
	// DO NOT REMOVE!                                            
	DELAY(2500);

	myComm.Configure(CommandProcessorID, NodeAddress);
          
	IF (Connect)
		myComm.Connect(IPAddress, IPPort); 
}

